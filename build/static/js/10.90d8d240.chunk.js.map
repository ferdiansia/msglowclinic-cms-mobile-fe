{"version":3,"sources":["components/PageTitleWrapper/index.tsx","utils/string-function.ts","components/Modal/modal-delete.component.tsx","content/banner/BannerListTable.tsx","content/banner/BannerList.tsx","content/banner/PageHeader.tsx","content/banner/index.tsx","content/banner/BannerForm.tsx","content/banner/BannerModalForm.tsx","content/banner/MainBannerCard.tsx","utils/date-function.ts","content/banner/MainBanner.tsx"],"names":["PageTitle","styled","Box","theme","spacing","PageTitleWrapper","children","maxWidth","toCapitalize","data","separator","result","dataArr","split","forEach","v","i","trim","replace","c","toUpperCase","replaceAll","length","ModalDelete","props","open","onClose","handleClose","id","title","content","variant","sx","width","disabled","loading","onClick","color","startIcon","fontSize","autoFocus","React","memo","BannerListTable","mainBannerData","useAppSelector","state","banners","useTheme","Card","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","type","map","banner","index","hover","alt","src","file","url","Typography","fontWeight","gutterBottom","noWrap","description","expired_at","format","utcToZonedTime","parseISO","timeZone","Tooltip","arrow","IconButton","handleOpenEdit","background","colors","primary","lighter","palette","main","size","hasDelete","handleDelete","error","BannerList","dispatch","useAppDispatch","getAllData","getBannerByType","slug","relations","useEffect","handleOpenModalDelete","handleOpenModalEdit","PageHeader","Grid","container","justifyContent","alignItems","item","component","hasCreate","Button","mt","xs","md","handleOpenModalForm","Banner","useState","openModalDelete","setOpenModelDelete","selectedId","setSelectedId","alert","useAlert","filterTypeHasDeleteCreate","handleCloseModalDelete","useCallback","setTimeout","handleDeleteClick","removeBanner","actionResult","unwrapResult","show","handleOpenModal","includes","Container","mb","direction","ErrorWrapper","bannerValidationSchema","object","string","required","mixed","BannerForm","defaultValue","Date","useForm","resolver","yupResolver","defaultValues","control","handleSubmit","errors","formState","onSubmit","value","autoComplete","name","render","field","TextField","placeholder","label","fullWidth","helperText","message","rows","multiline","InputLabelProps","shrink","onChange","e","target","files","BannerModalForm","Dialog","disableEscapeKeyDown","DialogTitle","DialogContent","DialogActions","LoadingButton","form","MainBannerCard","getDataBanner","CardHeader","action","handleEditData","CardMedia","height","image","CardContent","formatDate","date","dnsFormat","getTime","MainBanner","openModalForm","setOpenModalForm","setData","handleCloseModalForm","handleOpenModalFormEdit","formData","FormData","append","updateBanner","payload","body","addBanner"],"mappings":"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","file":"static/js/10.90d8d240.chunk.js","sourcesContent":["import { FC, ReactNode } from 'react';\nimport { Container } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\nimport { Box } from '@mui/material';\n\nconst PageTitle = styled(Box)(\n  ({ theme }) => `\n        padding: ${theme.spacing(4, 0)};\n`\n);\n\ninterface PageTitleWrapperProps {\n  children?: ReactNode;\n}\n\nconst PageTitleWrapper: FC<PageTitleWrapperProps> = ({ children }) => {\n  return (\n    <>\n      <PageTitle>\n        <Container maxWidth=\"lg\">\n          {children}\n        </Container>\n      </PageTitle>\n    </>\n  );\n};\n\nPageTitleWrapper.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default PageTitleWrapper;\n","export const toCapitalize = (data: string, separator: string = \"-\"): string => {\n  let result: string = \"\"\n  const dataArr = data.split(separator)\n  dataArr.forEach((v, i) => {\n    result += v.trim().replace(/^\\w/, (c) => c.toUpperCase()).replaceAll(\"-\", \" \");\n\n    if (i !== dataArr.length - 1) {\n      result += \" \"\n    }\n  })\n  return result\n};\n","import { LoadingButton } from '@mui/lab';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from '@mui/material';\nimport React from 'react';\nimport DeleteForeverTwoToneIcon from '@mui/icons-material/DeleteForeverTwoTone';\n\nexport interface IModalDeleteProps {\n  open: boolean;\n  handleClose: () => void;\n  title: string;\n  content: string;\n  onClick: () => void;\n  loading: boolean;\n}\n\nfunction ModalDelete(props: IModalDeleteProps) {\n  return (\n    <Dialog\n      open={props.open}\n      onClose={() => props.handleClose()}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {props.content}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          sx={{ width: 100 }}\n          disabled={props.loading}\n          onClick={() => props.handleClose()}\n        >\n          Tidak\n        </Button>\n        <LoadingButton\n          variant=\"contained\"\n          sx={{ width: 100 }}\n          loading={props.loading}\n          disabled={props.loading}\n          onClick={props.onClick}\n          color=\"error\"\n          startIcon={<DeleteForeverTwoToneIcon fontSize=\"small\" />}\n          autoFocus\n        >\n          Hapus\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default React.memo(ModalDelete);\n","import React, { FC } from 'react';\nimport {\n  Card,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableContainer,\n  Typography,\n  Tooltip,\n  IconButton,\n  useTheme\n} from '@mui/material';\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\nimport { parseISO } from 'date-fns';\nimport { format, utcToZonedTime } from 'date-fns-tz';\n\nimport { IBanner, IBannerType } from 'src/models/banner.model';\nimport { IBannerForm } from './BannerForm';\nimport { useAppSelector } from 'src/redux/store';\n\ninterface BannerListTableProps {\n  className?: string;\n  handleDelete: (index: number) => void;\n  hasDelete?: boolean;\n  handleOpenEdit: (id: IBannerForm) => void;\n  type: IBannerType;\n}\n\nconst BannerListTable: FC<BannerListTableProps> = (props) => {\n  // const banners = useSelector(selectAllBanner);\n  const { mainBannerData } = useAppSelector((state) => state.banners);\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <Card>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell width={110}>Image</TableCell>\n                <TableCell>Title</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Expired Date</TableCell>\n                <TableCell align=\"right\">Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {mainBannerData?.[`${props.type}-banner`]?.map(\n                (banner: IBanner, index: number) => {\n                  return (\n                    <TableRow hover key={banner.id}>\n                      <TableCell width={110}>\n                        <img\n                          loading=\"lazy\"\n                          width={100}\n                          alt=\"banner img\"\n                          src={banner.file.url}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Typography\n                          variant=\"body1\"\n                          fontWeight=\"bold\"\n                          color=\"text.primary\"\n                          gutterBottom\n                          noWrap\n                        >\n                          {banner.title}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography\n                          variant=\"body1\"\n                          fontWeight=\"bold\"\n                          color=\"text.primary\"\n                          gutterBottom\n                          noWrap\n                        >\n                          {banner.description}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography\n                          variant=\"body1\"\n                          fontWeight=\"bold\"\n                          color=\"text.primary\"\n                          gutterBottom\n                          noWrap\n                        >\n                          {banner?.expired_at &&\n                            format(\n                              utcToZonedTime(\n                                parseISO(banner.expired_at),\n                                'UTC'\n                              ),\n                              'dd-MM-yyyy HH:mm',\n                              { timeZone: 'UTC' }\n                            )}\n                        </Typography>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Tooltip title=\"Edit\" arrow>\n                          <IconButton\n                            onClick={() => props.handleOpenEdit(banner)}\n                            sx={{\n                              '&:hover': {\n                                background: theme.colors.primary.lighter\n                              },\n                              color: theme.palette.primary.main\n                            }}\n                            color=\"inherit\"\n                            size=\"small\"\n                          >\n                            <EditTwoToneIcon fontSize=\"small\" />\n                          </IconButton>\n                        </Tooltip>\n                        {props.hasDelete && (\n                          <Tooltip title=\"Delete\" arrow>\n                            <IconButton\n                              onClick={() => props.handleDelete(index)}\n                              sx={{\n                                '&:hover': {\n                                  background: theme.colors.error.lighter\n                                },\n                                color: theme.palette.error.main\n                              }}\n                              color=\"inherit\"\n                              size=\"small\"\n                            >\n                              <DeleteTwoToneIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  );\n                }\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Card>\n    </>\n  );\n};\n\nexport default React.memo(BannerListTable);\n","import { Card } from '@mui/material';\nimport { memo, useEffect } from 'react';\nimport { IBannerType } from 'src/models/banner.model';\nimport { getBannerByType } from 'src/redux/banner/bannerSlice';\nimport { useAppDispatch } from 'src/redux/store';\nimport { IBannerForm } from './BannerForm';\nimport BannerListTable from './BannerListTable';\n\nexport interface IBannerListProps {\n  hasDelete?: boolean;\n  title: IBannerType;\n  handleOpenModalDelete: (index: number) => void;\n  handleOpenModalEdit: (id: IBannerForm) => void;\n}\n\nfunction BannerList(props: IBannerListProps) {\n  const dispatch = useAppDispatch();\n\n  const getAllData = async () => {\n    await dispatch(\n      getBannerByType({\n        slug: `${props.title}-banner`,\n        type: 'collection',\n        relations: 'file'\n      })\n    );\n  };\n\n  useEffect(() => {\n    getAllData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.title]);\n\n  return (\n    <Card>\n      <BannerListTable\n        handleDelete={props.handleOpenModalDelete}\n        handleOpenEdit={props.handleOpenModalEdit}\n        hasDelete={!!props.hasDelete}\n        type={props.title}\n      />\n    </Card>\n  );\n}\n\nexport default memo(BannerList);\n","import { Typography, Button, Grid, Tooltip } from '@mui/material';\n\nimport AddTwoToneIcon from '@mui/icons-material/AddTwoTone';\nimport { toCapitalize } from 'src/utils/string-function';\nimport React from 'react';\nimport { IBannerType } from 'src/models/banner.model';\n\nexport interface IBannePageHeaderProps {\n  title: IBannerType;\n  hasCreate?: boolean;\n  handleOpenModalForm?: ({ slug: IBannerType }) => void;\n}\n\nfunction PageHeader(props: IBannePageHeaderProps) {\n  return (\n    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n      <Grid item>\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\n          {toCapitalize(props.title)} Banner\n        </Typography>\n      </Grid>\n      {!!props.hasCreate && (\n        <Grid item>\n          <Tooltip title=\"Create\" arrow>\n            <Button\n              sx={{ mt: { xs: 2, md: 0 } }}\n              variant=\"contained\"\n              onClick={() =>\n                props.handleOpenModalForm({ slug: `${props.title}-banner` })\n              }\n              startIcon={<AddTwoToneIcon fontSize=\"small\" />}\n            >\n              Create {toCapitalize(props.title)} Banner\n            </Button>\n          </Tooltip>\n        </Grid>\n      )}\n    </Grid>\n  );\n}\n\nexport default React.memo(PageHeader);\n","import { Container, Grid } from '@mui/material';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { memo, useCallback, useState } from 'react';\nimport PageTitleWrapper from 'src/components/PageTitleWrapper';\nimport {\n  removeBanner\n  // selectEntitiesBanner\n} from 'src/redux/banner/bannerSlice';\nimport { useAppDispatch, useAppSelector } from 'src/redux/store';\nimport { IBannerForm } from './BannerForm';\nimport BannerList from './BannerList';\nimport PageHeader from './PageHeader';\nimport { useAlert } from 'react-alert';\nimport ModalDeleteComponent from 'src/components/Modal/modal-delete.component';\n// import { useSelector } from 'react-redux';\nimport { IBannerSlug, IBannerType } from 'src/models/banner.model';\n\nexport interface IBannerProps {\n  type: IBannerType;\n  handleOpenModal: ({ slug: IBannerType }) => void;\n  handleOpenModalEdit: (id?: IBannerForm) => void;\n  loading: boolean;\n}\n\nfunction Banner(props: IBannerProps) {\n  const [openModalDelete, setOpenModelDelete] = useState<boolean>(false);\n  // const bannerEntities = useSelector(selectEntitiesBanner);\n  const { mainBannerData } = useAppSelector((state) => state.banners);\n\n  const [selectedId, setSelectedId] = useState<number>(null);\n  const dispatch = useAppDispatch();\n  const alert = useAlert();\n\n  const filterTypeHasDeleteCreate: IBannerType[] = [\n    'promo',\n    'about-us-gallery'\n  ];\n\n  const handleCloseModalDelete = useCallback(() => {\n    setOpenModelDelete(false);\n    setTimeout(() => {\n      setSelectedId(null);\n    }, 100);\n  }, []);\n\n  const handleOpenModalDelete = useCallback((index: number) => {\n    setSelectedId(index);\n    setOpenModelDelete(true);\n  }, []);\n\n  const handleDeleteClick = async () => {\n    try {\n      const slug: IBannerSlug = `${props.type}-banner`;\n      const id = mainBannerData[slug][selectedId]?.id;\n      const actionResult = await dispatch(removeBanner({ type: slug, id: id }));\n      const result = unwrapResult(actionResult);\n      if (result) {\n        alert.show('Data berhasil dihapus');\n        handleCloseModalDelete();\n      }\n    } catch (err) {\n      alert.show(err);\n    }\n  };\n\n  return (\n    <>\n      <PageTitleWrapper>\n        <PageHeader\n          title={props.type}\n          handleOpenModalForm={props.handleOpenModal}\n          hasCreate={filterTypeHasDeleteCreate.includes(props.type)}\n        />\n      </PageTitleWrapper>\n      <Container maxWidth=\"lg\" sx={{ mb: 10 }}>\n        <Grid\n          container\n          direction=\"row\"\n          justifyContent=\"center\"\n          alignItems=\"stretch\"\n          spacing={3}\n        >\n          <Grid item xs={12}>\n            <BannerList\n              title={props.type}\n              handleOpenModalDelete={handleOpenModalDelete}\n              hasDelete={filterTypeHasDeleteCreate.includes(props.type)}\n              handleOpenModalEdit={props.handleOpenModalEdit}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n\n      <ModalDeleteComponent\n        open={openModalDelete}\n        handleClose={handleCloseModalDelete}\n        title={`Anda yakin ingin menghapus banner ${\n          mainBannerData?.[`${props.type}-banner`]?.[selectedId]?.title\n        }`}\n        content={`Dengan menghapus banner \"${\n          mainBannerData?.[`${props.type}-banner`]?.[selectedId]?.title\n        }\" maka\n      data banner akan hilang secara permanen.`}\n        onClick={() => {\n          handleDeleteClick();\n        }}\n        loading={props.loading}\n      />\n    </>\n  );\n}\n\nexport default memo(Banner);\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { parseISO } from 'date-fns';\nimport { format, utcToZonedTime } from 'date-fns-tz';\nimport { Box, styled, TextField } from '@mui/material';\nimport React from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { IBannerSlug, IBannerType } from 'src/models/banner.model';\nimport { mixed, object, string } from 'yup';\n\nexport interface IBannerForm {\n  id?: string;\n  title: string;\n  slug?: IBannerSlug;\n  description?: string;\n  expired_at?: any;\n  url?: string;\n  file?: any;\n  relations?: string;\n}\n\nexport interface IBannerProps {\n  onSubmit: (data: IBannerForm, addData: boolean) => void;\n  defaultValue: IBannerForm | { slug: IBannerType };\n}\n\nconst ErrorWrapper = styled(Box)(\n  () => `\n    color: red\n  `\n);\n\nconst bannerValidationSchema = object({\n  title: string().required('Title wajib diisi'),\n  file: mixed().required('File wajib diisi')\n}).required();\n\nfunction BannerForm(props: IBannerProps) {\n  const defaultValue = {\n    id: null,\n    title: '',\n    slug: 'main-banner',\n    description: '',\n    url: '',\n    relations: null,\n    ...props?.defaultValue,\n    expired_at: props?.defaultValue?.['expired_at']\n      ? format(\n          utcToZonedTime(parseISO(props?.defaultValue?.['expired_at']), 'UTC'),\n          \"yyyy-MM-dd'T'HH:mm\",\n          { timeZone: 'UTC' }\n        )\n      : format(new Date(), \"yyyy-MM-dd'T'HH:mm\")\n  };\n\n  const HAS_EXPIRED_DATE = ['promo-banner', 'about-us-gallery-banner'];\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<any>({\n    resolver: yupResolver(bannerValidationSchema),\n    defaultValues: defaultValue\n  });\n\n  return (\n    <form\n      id=\"banner-form\"\n      onSubmit={handleSubmit((value) => props.onSubmit(value, true))}\n      autoComplete=\"off\"\n    >\n      <Box mt={3}>\n        <Controller\n          name=\"title\"\n          control={control}\n          defaultValue=\"\"\n          render={({ field }) => (\n            <TextField\n              {...field}\n              type=\"text\"\n              placeholder=\"Title\"\n              label=\"Title\"\n              fullWidth\n              error={!!errors?.title}\n              helperText={errors.title?.message}\n            />\n          )}\n        />\n      </Box>\n      <Box mt={3}>\n        <Controller\n          name=\"description\"\n          control={control}\n          defaultValue=\"\"\n          render={({ field }) => (\n            <TextField\n              {...field}\n              type=\"text\"\n              placeholder=\"Description\"\n              label=\"Description\"\n              rows={4}\n              multiline\n              fullWidth\n            />\n          )}\n        />\n      </Box>\n      <Box mt={3}>\n        <Controller\n          name=\"url\"\n          control={control}\n          defaultValue=\"\"\n          render={({ field }) => (\n            <TextField\n              {...field}\n              type=\"text\"\n              placeholder=\"URL\"\n              label=\"URL\"\n              fullWidth\n              error={!!errors?.url}\n              helperText={errors.url?.message}\n            />\n          )}\n        />\n      </Box>\n      {HAS_EXPIRED_DATE.includes(defaultValue?.slug) && (\n        <Box mt={3}>\n          <Controller\n            name=\"expired_at\"\n            control={control}\n            defaultValue={format(new Date(), \"yyyy-MM-dd'T'HH:mm\")}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                label=\"Expired Date\"\n                type=\"datetime-local\"\n                sx={{ width: 250 }}\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n\n              // <DateTimePicker\n              //   {...field}\n              //   label=\"Expired Date\"\n              //   renderInput={(params) => <TextField {...params} />}\n              // />\n            )}\n          />\n        </Box>\n      )}\n      <Box mt={3}>\n        <Controller\n          name=\"file\"\n          control={control}\n          render={({ field }) => (\n            <>\n              <input\n                type=\"file\"\n                onChange={(e) => {\n                  field.onChange(e.target.files[0]);\n                }}\n              />\n              {errors?.file && (\n                <ErrorWrapper>{errors?.file?.message}</ErrorWrapper>\n              )}\n            </>\n          )}\n        />\n      </Box>\n    </form>\n  );\n}\n\nexport default React.memo(BannerForm);\n","import { LoadingButton } from '@mui/lab';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography\n} from '@mui/material';\nimport React from 'react';\nimport { IBannerType } from 'src/models/banner.model';\nimport BannerForm, { IBannerForm } from './BannerForm';\n\nexport interface IBannerModalFormProps {\n  open: boolean;\n  handleClose: () => void;\n  onSubmit: (formData: IBannerForm) => void;\n  defaultValue: IBannerForm | { slug: IBannerType };\n  loading: boolean;\n}\nfunction BannerModalForm(props: IBannerModalFormProps) {\n  return (\n    <Dialog\n      disableEscapeKeyDown={true}\n      open={props.open}\n      fullWidth\n      maxWidth=\"sm\"\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle>\n        <Typography variant=\"h3\" gutterBottom>\n          Form Banner\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <BannerForm\n          onSubmit={props.onSubmit}\n          defaultValue={props.defaultValue}\n        ></BannerForm>\n      </DialogContent>\n\n      <DialogActions>\n        <Button\n          onClick={props.handleClose}\n          variant=\"contained\"\n          color=\"error\"\n          disabled={!!props.loading}\n          sx={{ width: 100 }}\n        >\n          Batal\n        </Button>\n        <LoadingButton\n          type=\"submit\"\n          loading={!!props.loading}\n          disabled={!!props.loading}\n          form=\"banner-form\"\n          variant=\"contained\"\n          sx={{ width: 100 }}\n        >\n          Simpan\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default React.memo(BannerModalForm);\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardMedia,\n  IconButton,\n  Tooltip,\n  Typography,\n  useTheme\n} from '@mui/material';\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\nimport { IBannerType } from 'src/models/banner.model';\nimport React, { useEffect } from 'react';\nimport { toCapitalize } from 'src/utils/string-function';\nimport { useAppDispatch, useAppSelector } from 'src/redux/store';\nimport { getBannerByType } from 'src/redux/banner/bannerSlice';\nimport { IBannerForm } from './BannerForm';\n\nexport interface IMainBannerCardProps {\n  type: IBannerType;\n  handleEditData: (id: IBannerForm) => void;\n}\n\nfunction MainBannerCard(props: IMainBannerCardProps) {\n  const theme = useTheme();\n  const { mainBannerData } = useAppSelector((state) => state.banners);\n\n  const dispatch = useAppDispatch();\n\n  const getDataBanner = async () => {\n    await dispatch(\n      getBannerByType({\n        slug: `${props.type}-banner`,\n        type: 'collection',\n        relations: 'file'\n      })\n    );\n  };\n\n  useEffect(() => {\n    getDataBanner();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.type]);\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          action={\n            <Tooltip title=\"Edit\" arrow>\n              <IconButton\n                onClick={() =>\n                  props.handleEditData(\n                    mainBannerData?.[`${props.type}-banner`]?.[0]\n                  )\n                }\n                sx={{\n                  '&:hover': {\n                    background: theme.colors.primary.lighter\n                  },\n                  color: theme.palette.primary.main\n                }}\n                color=\"inherit\"\n                size=\"small\"\n              >\n                <EditTwoToneIcon fontSize=\"small\" />\n              </IconButton>\n            </Tooltip>\n          }\n          title={`${toCapitalize(props.type)} banner`}\n        />\n        <CardMedia\n          component=\"img\"\n          height=\"140\"\n          image={`${mainBannerData?.[`${props.type}-banner`]?.[0]?.file?.url}`}\n          alt={`${toCapitalize(props.type)} banner image`}\n        />\n\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {`${mainBannerData?.[`${props.type}-banner`]?.[0]?.title || '-'}`}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {`${\n              mainBannerData?.[`${props.type}-banner`]?.[0]?.description || '-'\n            }`}\n          </Typography>\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n\nexport default React.memo(MainBannerCard);\n","import { format as dnsFormat } from 'date-fns';\n\nexport const formatDate = (\n  date: string,\n  format: string = 'yyyy-MM-dd HH:mm:ss'\n) => {\n  return dnsFormat(new Date(date).getTime(), format);\n};\n","import { Container, Grid } from '@mui/material';\nimport { memo, useCallback, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport PageTitleWrapper from 'src/components/PageTitleWrapper';\nimport Banner from '.';\nimport { IBannerForm } from './BannerForm';\nimport BannerModalForm from './BannerModalForm';\nimport MainBannerCard from './MainBannerCard';\nimport PageHeader from './PageHeader';\nimport { useAlert } from 'react-alert';\nimport { IBannerType } from 'src/models/banner.model';\nimport { useAppDispatch, useAppSelector } from 'src/redux/store';\nimport { formatDate } from 'src/utils/date-function';\nimport { addBanner, updateBanner } from 'src/redux/banner/bannerSlice';\nimport { unwrapResult } from '@reduxjs/toolkit';\n\nfunction MainBanner() {\n  const [openModalForm, setOpenModalForm] = useState<boolean>(false);\n  const { loading } = useAppSelector((state) => state.banners);\n\n  const [data, setData] = useState<IBannerForm | { slug: IBannerType }>(null);\n  const alert = useAlert();\n  const dispatch = useAppDispatch();\n\n  const BANNER_CARD: IBannerType[] = ['main', 'about-us', 'commerce'];\n\n  const handleCloseModalForm = useCallback(() => {\n    setOpenModalForm(false);\n    setTimeout(() => {\n      setData(null);\n    }, 100);\n  }, []);\n\n  const handleOpenModalForm = useCallback((slug: { slug: IBannerType }) => {\n    if (slug) setData(slug);\n    setOpenModalForm(true);\n  }, []);\n\n  const handleOpenModalFormEdit = useCallback((data?: IBannerForm) => {\n    if (data) setData(data);\n    setOpenModalForm(true);\n  }, []);\n\n  const onSubmit = useCallback(\n    async (formData: IBannerForm) => {\n      if (formData.expired_at)\n        formData.expired_at = formatDate(formData.expired_at);\n      formData.relations = 'file';\n\n      const file = new FormData();\n      if (!formData?.file?.id) {\n        file.append('file', formData.file);\n      }\n      delete formData.file;\n\n      try {\n        const actionResult = await dispatch(\n          !formData?.id\n            ? addBanner({ payload: formData, body: file })\n            : updateBanner({ payload: formData, body: file })\n        );\n        const result = unwrapResult(actionResult);\n        if (result) {\n          handleCloseModalForm();\n        }\n      } catch (err) {\n        alert.show(err);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <>\n      <Helmet>\n        <title>Banner</title>\n      </Helmet>\n      <PageTitleWrapper>\n        <PageHeader title={'main'} />\n      </PageTitleWrapper>\n      <Container maxWidth=\"lg\">\n        <Grid\n          container\n          direction=\"row\"\n          justifyContent=\"center\"\n          alignItems=\"stretch\"\n          spacing={3}\n        >\n          {BANNER_CARD.map((v, i) => (\n            <Grid item xs={4} key={`${i}-${v}-banner`}>\n              <MainBannerCard\n                handleEditData={handleOpenModalFormEdit}\n                type={v}\n              ></MainBannerCard>\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n      <Banner\n        loading={loading}\n        handleOpenModal={handleOpenModalForm}\n        handleOpenModalEdit={handleOpenModalFormEdit}\n        type=\"promo\"\n      />\n\n      <Banner\n        loading={loading}\n        handleOpenModal={handleOpenModalForm}\n        handleOpenModalEdit={handleOpenModalFormEdit}\n        type=\"about-us-gallery\"\n      />\n\n      <BannerModalForm\n        open={openModalForm}\n        handleClose={handleCloseModalForm}\n        onSubmit={onSubmit}\n        defaultValue={data}\n        loading={loading}\n      />\n    </>\n  );\n}\nexport default memo(MainBanner);\n"],"sourceRoot":""}